#! /usr/bin/env bash

# chkconfig: 2345 80 05
# description: Alert Manager
# processname: alertmanager
# pidfile: /var/run/alertmanager.pid

### BEGIN INIT INFO
# Provides:          alertmanager
# Required-Start:    $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start alrtmgr at boot time
### END INIT INFO

#  tested on
#  1. New lsb that define start-stop-daemon
#  3. Centos with initscripts package installed

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=alertmanager
DESC="Alert Manager"

ALRTMGR_USER=alrtmgr
ALRTMGR_GROUP=alrtmgr
ALRTMGR_HOME=/usr/share/alertmanager
CONF_DIR=/etc/alertmanager
WORK_DIR=$ALRTMGR_HOME
LOG_DIR=/var/log/alertmanager
LOG_FILE=$LOG_DIR/alertmanager.log
PID_FILE=/var/run/$NAME.pid
DAEMON=/usr/sbin/$NAME

if [ `id -u` -ne 0 ]; then
  echo "You need root privileges to run this script"
  exit 4
fi

if [ ! -x $DAEMON ]; then
  echo "Program not installed or not executable"
  exit 5
fi

#
# init.d / servicectl compatibility (openSUSE)
#
if [ -f /etc/rc.status ]; then
    . /etc/rc.status
    rc_reset
fi

#
# Source function library.
#
if [ -f /etc/rc.d/init.d/functions ]; then
    . /etc/rc.d/init.d/functions
fi

# overwrite settings from default file
[ -e /etc/sysconfig/$NAME ] && . /etc/sysconfig/$NAME


function isRunning() {
  status -p $PID_FILE $NAME > /dev/null 2>&1
}

case "$1" in
  start)
    isRunning
    if [ $? -eq 0 ]; then
      echo "Already running."
      exit 0
    fi

    # Prepare environment
    mkdir "$LOG_DIR" && chown "$ALRTMGR_USER":"$ALRTMGR_GROUP" "$LOG_DIR"
    touch "$LOG_FILE"  && chown "$ALRTMGR_USER":"$ALRTMGR_GROUP" "$LOG_FILE" 
    touch "$PID_FILE" && chown "$ALRTMGR_USER":"$ALRTMGR_GROUP" "$PID_FILE"

    # Start Daemon
    cd $ALRTMGR_HOME
    action $"Starting $DESC: ..." su -s /bin/sh -c "nohup ${DAEMON} >> ${LOG_FILE} 3>&1 &" $ALRTMGR_USER 2> /dev/null
    return=$?
    if [ $return -eq 0 ]
    then
      sleep 1
      # check if pid file has been written two
      if ! [[ -s $PID_FILE ]]; then
        echo "FAILED"
        exit 1
      fi
      i=0
      timeout=10
      # Wait for the process to be properly started before exiting
      until { cat "$PID_FILE" | xargs kill -0; } >/dev/null 2>&1
      do
        sleep 1
        i=$(($i + 1))
        if [ $i -gt $timeout ]; then
          echo "FAILED"
          exit 1
        fi
      done
    fi

    exit $return
    ;;
  stop)
    echo -n "Stopping $DESC: ..."

    if [ -f "$PID_FILE" ]; then
      killproc -p $PID_FILE -d 20 $NAME
      if [ $? -eq 1 ]; then
        echo  "$DESC is not running but pid file exists, cleaning up"
      elif [ $? -eq 3 ]; then
        PID="`cat $PID_FILE`"
        echo  "Failed to stop $DESC (pid $PID)"
        exit 1
      fi
      rm -f "$PID_FILE"
      echo  ""
      exit 0
    else
      echo  "(not running)"
    fi
    exit 0
    ;;
  status)
    status -p $PID_FILE $NAME
    exit $?
    ;;
  restart|force-reload)
    if [ -f "$PID_FILE" ]; then
      $0 stop
      sleep 1
    fi
    $0 start
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|force-reload|status}"
    exit 3
    ;;
esac